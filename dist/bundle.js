(()=>{"use strict";var e={44:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TIMEOUT_ms=void 0,t.TIMEOUT_ms=1e3},92:function(e,t,s){var r=this&&this.__createBinding||(Object.create?function(e,t,s,r){void 0===r&&(r=s);var n=Object.getOwnPropertyDescriptor(t,s);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[s]}}),Object.defineProperty(e,r,n)}:function(e,t,s,r){void 0===r&&(r=s),e[r]=t[s]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.prototype.hasOwnProperty.call(e,s)&&r(t,e,s);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.deleteUserById=t.updateUser=t.getUserById=t.createUser=t.getUsers=void 0;const a=s(556),i=s(304),u=o(s(164));t.getUsers=async(e,t)=>{try{const e=(0,a.ArrayOfUsers)(await u.getUsers());(0,i.response)(t,{status:200,data:{users:e}})}catch(e){console.log("Error while getting users",e)}},t.createUser=async(e,t,s)=>{try{const e=await u.addUser(s);e?(0,i.response)(t,{status:201,data:{user:e}}):(0,i.response)(t,{status:500,data:{message:"Error while creating user"}})}catch(e){console.log("Error while creating user",e)}},t.getUserById=async(e,t)=>{const s=e.params?.id;if(s)if((0,i.isUUID)(s))try{if(s){const e=await u.getOneUser(s);e?(0,i.response)(t,{status:200,data:{user:e}}):(0,i.response)(t,{status:404,data:{message:`User with id ${s} NOT FOUND`}})}else(0,i.response)(t,{status:400,data:{message:"Invalid user id"}})}catch(e){console.log(`Error while getting on user with id: ${s}`,e)}else(0,i.response)(t,{status:400,data:{message:"Provided user ID is not UUID"}});else(0,i.response)(t,{status:400,data:{message:"No user ID provided"}})},t.updateUser=async(e,t,s)=>{const r=e.params?.id;if(r)if((0,i.isUUID)(r)){s={...s,id:r};try{const e=await u.updateUser(s);e?(0,i.response)(t,{status:200,data:{user:e}}):(0,i.response)(t,{status:404,data:{message:`User with id ${r} NOT FOUND`}})}catch(e){console.log("Error while updating user",e)}}else(0,i.response)(t,{status:400,data:{message:"Provided user ID is not UUID"}});else(0,i.response)(t,{status:400,data:{message:"No user ID provided"}})},t.deleteUserById=async(e,t)=>{const s=e.params?.id;if(s)if((0,i.isUUID)(s))try{const e=await u.deleteUser(s);e?(0,i.response)(t,{status:204,data:{message:`User with id ${e.id} was deleted`}}):(0,i.response)(t,{status:404,data:{message:`User with id ${s} NOT FOUND`}})}catch(e){console.log(`Error while getting on user with id: ${s}`,e)}else(0,i.response)(t,{status:400,data:{message:"Provided user ID is not UUID"}});else(0,i.response)(t,{status:400,data:{message:"No user ID provided"}})}},996:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UsersDB=void 0;const r=s(556),n=s(872),o=s(44);class a{constructor(){if(a._instance)return a._instance;this.usersData=[],a._instance=this}static getInstance(){return this._instance}get users(){return this.usersData}set users(e){this.usersData=e}getUserById(e){return new Promise(((t,s)=>{setTimeout((()=>{let s;try{s=(0,r.ObjectUser)(this.users.find((t=>t.id===e))),t(s)}catch(e){t(null)}}),o.TIMEOUT_ms)}))}addNewUser(e){return new Promise(((t,s)=>{setTimeout((()=>{const s=(0,n.v4)();if(this.users.findIndex((e=>e.id===s))>-1)throw t(null),Error("Error in DB when creating new user");const r={id:s,...e};this.users.push(r),t(r)}),o.TIMEOUT_ms)}))}updateUser(e){return new Promise(((t,s)=>{setTimeout((()=>{const s=this.users.find((t=>t.id===e.id));if(s){const r={...s,...e};this.users=this.users.map((t=>t.id===e.id?r:t)),t(r)}else t(null)}),o.TIMEOUT_ms)}))}deleteUserById(e){return new Promise(((t,s)=>{setTimeout((()=>{let s;try{s=(0,r.ObjectUser)(this.users.find((t=>t.id===e))),s&&(this.users=this.users.filter((t=>t.id!==e)),t(s)),t(null)}catch(e){t(null)}}),o.TIMEOUT_ms)}))}}t.UsersDB=a},720:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.server=void 0;const n=r(s(136)),o=r(s(716)),a=s(20),i=s(380),u=process.env.PORT||4e3;t.server=n.default.createServer(((e,t)=>{const s=o.default.parse(e.url||"",!0),r=s.query||"",n=s.pathname||"",a=e.method?.toUpperCase()||"";let u=i.routes[n]&&i.routes[n][a];const d=e;if(!u){const e=Object.keys(i.routes).filter((e=>e.includes(":"))).find((e=>new RegExp(`^${e.replace(/:[^/]+/g,"([^/]+)")}$`).test(n)));if(e){const t=new RegExp(`^${e.replace(/:[^/]+/g,"([^/]+)")}$`),s=t.exec(n)?.slice(1),r=e?.match(/:[^/]+/g)?.map((e=>e.substring(1)));if(r){const e=s?.reduce(((e,t,s)=>({...e,[r[s]]:t})),{});d.params=e}u=i.routes[e][a]}}u||(u=i.routes.notFound.resp),d.query={};for(const e in r)d.query[e]=r[e];u(d,t)})),t.server.on("request",a.loggerMiddleware),t.server.listen(u,(()=>console.log(`Server is listening on port ${u}`)))},20:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.loggerMiddleware=void 0,t.loggerMiddleware=(e,t)=>{console.log(`${e.method} ${e.url}`)}},380:function(e,t,s){var r=this&&this.__createBinding||(Object.create?function(e,t,s,r){void 0===r&&(r=s);var n=Object.getOwnPropertyDescriptor(t,s);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[s]}}),Object.defineProperty(e,r,n)}:function(e,t,s,r){void 0===r&&(r=s),e[r]=t[s]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.prototype.hasOwnProperty.call(e,s)&&r(t,e,s);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.routes=void 0;const a=s(304),i=o(s(92)),u=s(428);t.routes={"/":{GET:(e,t)=>{(0,a.response)(t,{status:200,data:{message:"To run Node.js CRUD API path to /api"}})}},"/api":{GET:(e,t)=>{(0,a.response)(t,{status:200,data:{message:"Running Node.js CRUD API"}})}},"/api/users":{GET:i.getUsers,POST:(e,t)=>(0,u.validateUserData)(e,t,i.createUser)},"/api/users/:id":{GET:i.getUserById,PUT:(e,t)=>(0,u.validateUserData)(e,t,i.updateUser),DELETE:i.deleteUserById},notFound:{resp:(e,t)=>{(0,a.response)(t,{status:404,data:{message:"Requested resource not found!"}})}}}},164:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.deleteUser=t.updateUser=t.getOneUser=t.addUser=t.getUsers=void 0;const r=new(s(996).UsersDB);t.getUsers=()=>new Promise(((e,t)=>{setTimeout((()=>{const t=r.users;e(t)}),1e3)})),t.addUser=async e=>await r.addNewUser(e),t.getOneUser=async e=>await r.getUserById(e),t.updateUser=async e=>await r.updateUser(e),t.deleteUser=async e=>await r.deleteUserById(e)},556:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ArrayOfUsers=t.ObjectNewUser=t.ObjectUser=void 0;const s=e=>{if("string"!=typeof e)throw new Error(`${e} is not of type string`);return e},r=e=>{if("number"!=typeof e)throw new Error(`${e} is not of type number`);return e},n=e=>t=>{if(null===t||"object"!=typeof t)throw new Error(`${t} is not  of type ${typeof e}`);const s={};for(const r in e)s[r]=e[r](t[r]);return s},o=e=>t=>{if(!Array.isArray(t))throw new Error(`${t} is not of type ${typeof e}`);return t.map(e)};t.ObjectUser=n({id:s,username:s,age:r,hobbies:o(s)}),t.ObjectNewUser=n({username:s,age:r,hobbies:o(s)}),t.ArrayOfUsers=o(t.ObjectUser)},304:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isUUID=t.wait=t.getPostBodyAsync=t.response=void 0,t.response=function(e,t){e.statusCode=t.status,e.setHeader("Content-Type","application/json"),e.write(JSON.stringify(t.data)),e.end()},t.getPostBodyAsync=e=>new Promise(((t,s)=>{let r="";e.on("data",(e=>{r+=e})),e.on("end",(()=>{try{r=r?JSON.parse(r):{},t(r)}catch(e){s(e)}}))})),t.wait=e=>new Promise((t=>setTimeout(t,e))),t.isUUID=e=>/^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(e)},428:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.validateUserData=void 0;const r=s(556),n=s(304),o=s(304);t.validateUserData=async(e,t,s)=>{try{const o=await(0,n.getPostBodyAsync)(e),a=e.method?.toUpperCase(),i=["username","age","hobbies"],u=Object.keys(o);if("PUT"===a&&u.some((e=>i.some((t=>t===e)))))return void s(e,t,o);s(e,t,(0,r.ObjectNewUser)(o))}catch(e){console.log(e),e instanceof Error?(0,o.response)(t,{status:400,data:{message:e.message}}):(0,o.response)(t,{status:400,data:{message:"User data validation error - check fields"}})}}},872:(e,t,s)=>{s.r(t),s.d(t,{NIL:()=>I,parse:()=>m,stringify:()=>f,v1:()=>h,v3:()=>w,v4:()=>O,v5:()=>_,validate:()=>d,version:()=>D});const r=require("crypto");var n=s.n(r);const o=new Uint8Array(256);let a=o.length;function i(){return a>o.length-16&&(n().randomFillSync(o),a=0),o.slice(a,a+=16)}const u=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,d=function(e){return"string"==typeof e&&u.test(e)},c=[];for(let e=0;e<256;++e)c.push((e+256).toString(16).slice(1));function l(e,t=0){return c[e[t+0]]+c[e[t+1]]+c[e[t+2]]+c[e[t+3]]+"-"+c[e[t+4]]+c[e[t+5]]+"-"+c[e[t+6]]+c[e[t+7]]+"-"+c[e[t+8]]+c[e[t+9]]+"-"+c[e[t+10]]+c[e[t+11]]+c[e[t+12]]+c[e[t+13]]+c[e[t+14]]+c[e[t+15]]}const f=function(e,t=0){const s=l(e,t);if(!d(s))throw TypeError("Stringified UUID is invalid");return s};let p,U,g=0,y=0;const h=function(e,t,s){let r=t&&s||0;const n=t||new Array(16);let o=(e=e||{}).node||p,a=void 0!==e.clockseq?e.clockseq:U;if(null==o||null==a){const t=e.random||(e.rng||i)();null==o&&(o=p=[1|t[0],t[1],t[2],t[3],t[4],t[5]]),null==a&&(a=U=16383&(t[6]<<8|t[7]))}let u=void 0!==e.msecs?e.msecs:Date.now(),d=void 0!==e.nsecs?e.nsecs:y+1;const c=u-g+(d-y)/1e4;if(c<0&&void 0===e.clockseq&&(a=a+1&16383),(c<0||u>g)&&void 0===e.nsecs&&(d=0),d>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");g=u,y=d,U=a,u+=122192928e5;const f=(1e4*(268435455&u)+d)%4294967296;n[r++]=f>>>24&255,n[r++]=f>>>16&255,n[r++]=f>>>8&255,n[r++]=255&f;const h=u/4294967296*1e4&268435455;n[r++]=h>>>8&255,n[r++]=255&h,n[r++]=h>>>24&15|16,n[r++]=h>>>16&255,n[r++]=a>>>8|128,n[r++]=255&a;for(let e=0;e<6;++e)n[r+e]=o[e];return t||l(n)},m=function(e){if(!d(e))throw TypeError("Invalid UUID");let t;const s=new Uint8Array(16);return s[0]=(t=parseInt(e.slice(0,8),16))>>>24,s[1]=t>>>16&255,s[2]=t>>>8&255,s[3]=255&t,s[4]=(t=parseInt(e.slice(9,13),16))>>>8,s[5]=255&t,s[6]=(t=parseInt(e.slice(14,18),16))>>>8,s[7]=255&t,s[8]=(t=parseInt(e.slice(19,23),16))>>>8,s[9]=255&t,s[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,s[11]=t/4294967296&255,s[12]=t>>>24&255,s[13]=t>>>16&255,s[14]=t>>>8&255,s[15]=255&t,s};function v(e,t,s){function r(e,r,n,o){var a;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));const t=[];for(let s=0;s<e.length;++s)t.push(e.charCodeAt(s));return t}(e)),"string"==typeof r&&(r=m(r)),16!==(null===(a=r)||void 0===a?void 0:a.length))throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let i=new Uint8Array(16+e.length);if(i.set(r),i.set(e,r.length),i=s(i),i[6]=15&i[6]|t,i[8]=63&i[8]|128,n){o=o||0;for(let e=0;e<16;++e)n[o+e]=i[e];return n}return l(i)}try{r.name=e}catch(e){}return r.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",r.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",r}const w=v("v3",48,(function(e){return Array.isArray(e)?e=Buffer.from(e):"string"==typeof e&&(e=Buffer.from(e,"utf8")),n().createHash("md5").update(e).digest()})),b={randomUUID:n().randomUUID},O=function(e,t,s){if(b.randomUUID&&!t&&!e)return b.randomUUID();const r=(e=e||{}).random||(e.rng||i)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){s=s||0;for(let e=0;e<16;++e)t[s+e]=r[e];return t}return l(r)},_=v("v5",80,(function(e){return Array.isArray(e)?e=Buffer.from(e):"string"==typeof e&&(e=Buffer.from(e,"utf8")),n().createHash("sha1").update(e).digest()})),I="00000000-0000-0000-0000-000000000000",D=function(e){if(!d(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}},136:e=>{e.exports=require("http")},716:e=>{e.exports=require("url")}},t={};function s(r){var n=t[r];if(void 0!==n)return n.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,s),o.exports}s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s(720)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,